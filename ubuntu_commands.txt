INTRODUCTION:

Using Ubuntu on WSL2 allows you to:

	Run Linux commands (grep, sed, awk, vim, etc.).
	Install and use Linux development tools (Python, Node.js, Golang, etc.).
	Run Docker natively with systemd support.
	Use Bash scripts and automation.
	Access Windows files from Linux (/mnt/c/Users/...).
	Develop cross-platform applications easily.

Windows Subsystem for Linux 2 (WSL2) Using Ubuntu
	Windows Subsystem for Linux (WSL) is a compatibility layer in Windows that allows you to run a Linux environment (including 	command-line tools, utilities, and applications) directly on Windows without using a virtual machine (VM) or dual-boot setup.

WSL2 is the latest version of WSL, providing a more powerful and full-featured Linux experience on Windows.

In the context of an operating system (OS), a distro (short for distribution) refers to a specific version or variation of an OS, typically in the Linux and Unix ecosystem. A Linux distribution is a complete operating system built around the Linux kernel, bundled with various software, tools, libraries, and a package management system.

Ubuntu terminal is named bash, and allow it managing files, install software and control the system.

Key Components of a Linux Distro:
Linux Kernel ‚Äì The core part of the OS managing hardware and system processes.
Package Manager ‚Äì Tools like apt (Debian-based) or dnf (Fedora-based) that manage software installation and updates.
Shell & Terminal ‚Äì Command-line interfaces like Bash or Zsh.
Graphical User Interface (GUI) ‚Äì Desktop environments such as GNOME, KDE, or XFCE.
Pre-installed Software ‚Äì Text editors, browsers, system utilities, etc.
System Utilities & Libraries ‚Äì Essential components to run applications and services.

Popular Linux Distributions:
	Debian-based:
		Ubuntu
		Linux Mint
		Kali Linux
	Red Hat-based:
		Fedora
		CentOS Stream
		Rocky Linux
	Arch-based:
		Arch Linux
		Manjaro
	Others:
		openSUSE
		Slackware
		Gentoo
	Each distribution is tailored for different user needs‚Äîsome focus on stability (Debian, CentOS), usability (Ubuntu, Mint), security (Kali Linux), or customization (Arch, Gentoo).

A Linux distribution (distro) is essentially a customized package of the Linux kernel along with system utilities, libraries, and applications that enable users to operate and interact with their computers efficiently. Let‚Äôs break down how a Linux distro works internally.

1. Core Components of a Linux Distro
	A Linux distro is built upon a structured hierarchy of components that work together to provide a functional operating system.

A. Linux Kernel (Core of the OS)
	The Linux kernel acts as the bridge between hardware and software.
	It handles process management, memory management, hardware drivers, and system security.
	Distros might use different kernel versions and apply custom patches for performance or security enhancements.
B. Init System (Boot & Service Management)
	The init system is responsible for booting up the OS and managing background services (daemons).
	Common init systems:
		systemd (Most modern distros like Ubuntu, Fedora, Arch)
		SysVinit (Older systems)
		OpenRC (Gentoo, Alpine Linux)

C. Shell & Command Line Interface (CLI)
	The shell provides an interface for interacting with the OS.
	Common shells:
		Bash (Most common)
		Zsh (Popular alternative)
		Fish, Tcsh
D. Filesystem Hierarchy
	Linux distros follow the Filesystem Hierarchy Standard (FHS):
	/ (root) - Base of the file system
	‚îú‚îÄ‚îÄ /bin - Essential command binaries
	‚îú‚îÄ‚îÄ /etc - System configuration files
	‚îú‚îÄ‚îÄ /home - User directories
	‚îú‚îÄ‚îÄ /lib - Essential libraries
	‚îú‚îÄ‚îÄ /usr - User applications and utilities
	‚îú‚îÄ‚îÄ /var - Logs, caches, temporary files
	‚îú‚îÄ‚îÄ /dev - Hardware devices (block storage, USB, etc.)
	‚îú‚îÄ‚îÄ /mnt - Mounted drives (e.g., USB)
	‚îú‚îÄ‚îÄ /proc - System and process information
	‚îú‚îÄ‚îÄ /sys - Kernel and system info
	‚îî‚îÄ‚îÄ /tmp - Temporary files
E. Package Management System
	Distros include a package manager to install, update, and remove software.
	Different distros use different package managers:
		Debian-based: dpkg, apt
		RedHat-based: dnf, rpm
		Arch-based: pacman
		Gentoo: portage
	Packages are stored in repositories (repos), which contain pre-compiled software.
F. Desktop Environment (GUI)
	Provides a graphical interface for users who don‚Äôt prefer CLI.
	Common desktop environments:
		GNOME (Fedora, Ubuntu)
		KDE Plasma (Kubuntu, Manjaro KDE)
		XFCE, LXDE, Cinnamon, MATE (Lightweight options)

2. How a Linux Distro Works Step-by-Step
	A. Boot Process
		BIOS/UEFI initializes the hardware.
		Bootloader (GRUB, systemd-boot, LILO) loads the Linux kernel.
		Kernel initializes system hardware and mounts the root filesystem.
		Init system (systemd) starts background services (networking, logging, display server).
		Login prompt appears (CLI or graphical interface).
	B. Process Management
		The kernel schedules processes and allocates CPU time.
		Processes can be:
			Foreground (e.g., running a command in terminal)
			Background (Daemon/Service) (e.g., SSH server, Apache web server)
	C. User and Permissions
		Linux is a multi-user OS:
			Root (Administrator)
			Regular users
			Groups for permission management
		The permissions system controls file access (rwx for read, write, execute).
	D. Filesystem Management
		Everything in Linux is treated as a file (including devices like /dev/sda1).
		Uses different filesystems like:
			ext4 (default in most distros)
			XFS, Btrfs, ZFS (advanced features)
	E. Networking
		Network interfaces are managed via:
			NetworkManager (GUI & CLI)
			ifconfig/ip (CLI)
		Supports networking protocols:
			TCP/IP, SSH, FTP, HTTP, etc.
		Uses firewalls (iptables, firewalld, UFW) for security.

It returns the name of the init system running on the machine. Possible outputs include:

	init ‚Üí If using SysVinit.
	systemd ‚Üí If using systemd (modern Ubuntu versions).
	busybox or runit ‚Üí If using a lightweight init system.
	upstart ‚Üí If using Upstart (older Ubuntu versions).

1Ô∏è‚É£ How Does Ubuntu Work?
	Ubuntu works similarly to other operating systems like Windows or macOS, but with some key differences:

		It is open-source and free.
		Uses the Linux kernel as its core.
		Supports a wide range of software applications (both GUI and command-line).
		Uses a package manager (apt) to install and update software.
		Can be used as a desktop OS, server, or even on embedded devices.
Key Components
	Kernel ‚Äì The core part of Ubuntu that interacts with hardware.
	Shell (Command Line) ‚Äì Interface for running commands (e.g., Bash, Zsh).
	Desktop Environment ‚Äì Graphical interface (GNOME, KDE, XFCE, etc.).
	Package Manager (apt) ‚Äì Installs and updates software.
	File System ‚Äì Uses a hierarchy like /home, /etc, /bin, etc.
2Ô∏è‚É£ What is Ubuntu?
	üîπ Ubuntu at a Glance
		Created by Canonical Ltd. in 2004.
		Based on Debian Linux.
		Available in different flavors (Desktop, Server, Cloud, IoT).
		Comes in Long-Term Support (LTS) versions (supported for 5 years).
	Edition	|  Purpose
Ubuntu Desktop  |  For personal use, graphical UI, web browsing, office work.
  Ubuntu Server	|  For hosting websites, databases, and cloud services.
   Ubuntu Core	|  For IoT (Internet of Things) devices.
 Ubuntu Flavors	|  Variants with different desktop environments (Kubuntu, Xubuntu, Lubuntu).

3Ô∏è‚É£ How to Use Ubuntu?
	üîπ Basic Commands
	To use Ubuntu efficiently, you should learn some basic terminal commands:

	üíª Navigation & File Management
	Command	        |Description
	pwd		|Show current directory
	ls		|List files and folders
	cd foldername	|Change directory
	mkdir foldername|Create a new folder
	rm filename	|Delete a file
	rm -r foldername|Delete a folder

üîπ Installing Software
	Ubuntu uses apt (Advanced Package Tool) to install and update software.

üîπ Ubuntu GUI (Graphical Interface)
	If you're using Ubuntu Desktop, you'll interact with GNOME, the default graphical user interface. Here are some key elements:

		Activities Overview (Super key/Windows key) ‚Äì Search and open applications.
		File Manager ‚Äì Browse files and folders (similar to Windows Explorer).
		Settings ‚Äì Adjust system preferences.
		Terminal ‚Äì Access the command line.




1. Create mockoon into Ubuntu subsystem: docker run -d --name response_updated_pocket_sucessful --mount type=bind,source=/mnt/c/practice_test/LocalEnviroment/edit_pocket_succesful_mock.json,target=/data/,readonly -p 3001:3001 mockoon/cli:latest --data /data --port 3001

2. Start Docker: systemctl start docker or sudo systemctl start docker
3. Get docker info: docker info
4. Execute file: sh /mnt/c/banco/distribution_router/superApp/init.sh or sh init.sh
5. Update docker in Ubunto: sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -	m)" -o /usr/local/bin/docker-compose
	sudo chmod +x /usr/local/bin/docker-compose
6.To check if systemd is working, run: ps --no-headers -o comm 1
7. systemctl start apache2
8. systemctl stop MySQL
9. systemctl restart nginx
10. systemctl list-units --type=service
11. systemctl poweroff
12. write on location: echo -e "[boot]\nsystemd=true" | sudo tee -a /etc/wsl.conf: echo= enable newline. tee= appends (-a) the text to 	/etc/wsl.conf while 							using sudo
13. Open the file in the nano editor: sudo nano /etc/wsl.conf
14. Restart WSL: wsl
15. Verify if systemd is running: systemctl list-units --type=service
16. Install dependencies: sudo apt install wsl
17. wsl --install
18. wsl --list --online
19. install ubuntu into Windows: wsl --install -d Ubuntu
20. Install WSL2 by default: wsl --set-version Ubuntu 2 (and) wsl --set-default-version 2
21. check wsl: wsl --list --verbose
22. Open Ubuntu from the Start menu or Windows Terminal: sudo apt update && sudo apt upgrade -y
23. To check if you're running WSL2: uname -r
24. Edit the WSL config file: sudo nano /etc/wsl.conf (and adding text)
25. restar WSL: wsl --shutdown
26. Verify systemd is running: systemctl list-units --type=service

27. INSIDE WSL UBUNTU, YOU CAN ACCESS YOUR WINDOWS FILES AT ACCESS WINDOWS FILE: cd /mnt/c/ 
28. See folder: ls
29. To See if file is accesible: ls -l /mnt/c/practice_test/LocalEnvironment/
30. See permisi√≥n: ls -l /mnt/c/file
31. Amend mode permition: chmod +r /mnt/c/banco/practice_test/LocalEnvironment/edit_pocket_succesful_mock.json
32. Init docker into Ubuntu: sudo systemctl start docker
33. Init docker into Ubuntu by default: sudo systemctl enable docker
34. to see content into file wsl.conf using Ubuntu: cat /etc/wsl.conf
35. /mnt/: is a mounting from windows file. Embebbed system ubuntu into Windows.
36. Update system: sudo apt update && sudo apt upgrade -y
37.Install an application: sudo apt install app-name
38. Install VLC Media Player: sudo apt install vlc
39. Uninstall an application: sudo apt remove app-name
USER & PERMISSIONS:
40. show current user: whoami
41. run a command as an admin (root): sudo command
42. Make a file executable: chmod +x file.sh
43. Change file ownership: chown user:group file
SYSTEM MANAGEMENT:
44. check disk space: df -h
45. check RAM usage: free -m
46. List running processes: ps aux.
47. Monitor system performance: top or htop












